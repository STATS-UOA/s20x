for(line in Lines){
Authors = str_extract(line, "(^[^']+)")
AuthorList = unlist(str_extract_all(Authors, "([A-Z]+), ([A-Z.]+)( [A-Z.]+)*,"))
newAuthors = NULL
for(author in AuthorList){
surname = str_extract(author, "(^[A-Z]+)")
initials = gsub("^[A-Z]+, (([A-Z.]+)( [A-Z.]+)*)", "\\1", author)
newAuthors = c(newAuthors, paste0(substr(surname, 1, 1), tolower(substr(surname, 2, nchar(surname))), ", ", initials))
}
Lines1[i] = str_replace(line, "(^[^']+)", paste0(paste(newAuthors, collapse = " "), " "))
i = i + 1
}
Lines1
Lines = readLines("refs.txt")
Lines = rev(Lines)
library(stringr)
Lines1 = Lines
i = 1
for(line in Lines){
Authors = str_extract(line, "(^[^']+)")
AuthorList = unlist(str_extract_all(Authors, "([A-Z]+), ([A-Z.]+)( [A-Z.]+)*,"))
newAuthors = NULL
for(author in AuthorList){
surname = str_extract(author, "(^[A-Z]+)")
initials = gsub("^[A-Z]+, (([A-Z.]+)( [A-Z.]+)*)", "\\1", author)
newAuthors = c(newAuthors, paste0(substr(surname, 1, 1), tolower(substr(surname, 2, nchar(surname))), ", ", initials))
}
Lines1[i] = str_replace(line, "(^[^']+)", paste0(paste(newAuthors, collapse = " "), " "))
i = i + 1
}
Lines1
writeLines(Lines1, "newrefs.txt")
library(s20x)
library(s20x)
data(arousal.df)
#' arousal.fit = lm(arousal ~ gender * picture, data = arousal.df)
data(arousal.df)
arousal.fit = lm(arousal ~ gender * picture, data = arousal.df)
arousal.aov
arousal.aov = aov(arousal.fit)
anova(arousal.aov)
summary(arousal.aov)
names(summary(arousal.aov))
str(summary(arousal.aov))
summary(arousal.aov)$Df
summary(arousal.aov)[[1]]$Df
str(arousal.fit)
arousal.fit$terms
attr(arousal.fit$terms, 'dataClasses'
)
names(attr(arousal.fit$terms, 'dataClasses'))
str(fit.aov)
str(arousal.aov)
attr(arousal.aov$terms, "response")
?lm
fit.aov = arousal.aov
respIdx = attr(fit.aov$terms, "response")
attr(fit.aov$terms, "dataClasses")[-respIdx]
attr(fit.aov$terms, "dataClasses")[-respIdx] == "factor"
respIdx = attr(fit.aov$terms, "factors")
respIdx
attr(fit.aov$terms, "factors")
attr(fit.aov$terms, "order")
ter = if(any(attr(fit.aov$terms, "order" == 2))){
TRUE
}else{
FALSE
}
iter = if(any(attr(fit.aov$terms, "order") == 2)){
TRUE
}else{
FALSE
}
iter
fit.aov$model
?model.tables
?TukeyHSD
model.tables(fit.aov)
summary2way(arousal.fit, "table")
summary2way(arousal.fit, "page")
summary2way(arousal.fit, "effects")
summary2way(arousal.fit, "means")
model.tables(fit.aov)
model.tables(fit.aov, "means")
model.tables(fit.aov, "means", se = TRUE)
str(model.tables(fit.aov, "means"))
model.tables(fit.aov, "means")$n
?model.tables
results = list(
tbl = alist,
means = model.tables(fit.aov, "means"),
effects = model.tables(fit.aov, "effects"),
comparisons = TukeyHSD(fit.aov, conf.level = conf.level, ... = ...)
)
results = list(
tbl = alist,
means = model.tables(fit.aov, "means"),
effects = model.tables(fit.aov, "effects"),
comparisons = TukeyHSD(fit.aov, conf.level = conf.level)
)
conf.level = 0.95
results = list(
tbl = alist,
means = model.tables(fit.aov, "means"),
effects = model.tables(fit.aov, "effects"),
comparisons = TukeyHSD(fit.aov, conf.level = conf.level)
)
alist
alist = summary(fit.aov)
results = list(
tbl = summary(fit.aov),
means = model.tables(fit.aov, "means"),
effects = model.tables(fit.aov, "effects"),
comparisons = TukeyHSD(fit.aov, conf.level = conf.level)
)
results
?summaryStats
2^(-036)
?family.glm
??quasi
??"family=quasi"
help.search("family = quasi")
setwd("~/curran/Work/2017/teaching/779/Project")
class.df  = read.csv("STATS_779.csv")
class.df
g = rep(1:5, rep(6, 6))
g = rep(1:5, rep(6, 5))
g
class.df = class.df[o, ]
class.df = class.df[o, ]
class.df  = read.csv("STATS_779.csv")
o = sample(1:nrow(class.df))
g = rep(1:5, rep(6, 5))
class.df = class.df[o, ]
class.df$group = g
g
class.df
class.df = class.df[, -2]
?print.xtable
install.packages("xtable")
?print.xtable
library(xtable)
?print.xtable
g = 1
group.df = subset(class.df, group == g)[,1:2]
tbl = xtable(group.df)
align(tbl) = "cc"
align(tbl) = "lll"
print(tbl)
print(tbl, include.rownames = FALSE)
group.df = subset(class.df, group == g)[,1:2]
names(group.df) = c("Name", "UPI")
tbl = xtable(group.df)
align(tbl) = "lll"
fileName = paste0("group", g, ".tex")
print(tbl, include.rownames = FALSE)
class.df  = read.csv("STATS_779.csv")
o = sample(1:nrow(class.df))
g = rep(1:5, rep(6, 5))
class.df = class.df[o, ]
class.df$group = g
class.df = class.df[, -2]
library(xtable)
for(g in 1:5){
group.df = subset(class.df, group == g)[,1:2]
names(group.df) = c("Name", "UPI")
tbl = xtable(group.df)
align(tbl) = "|l|l|l|"
fileName = paste0("group", g, ".tex")
print(tbl, file = fileName, include.rownames = FALSE)
}
for(g in 1:5){
group.df = subset(class.df, group == g)[,1:2]
names(group.df) = c("Name", "UPI")
tbl = xtable(group.df)
align(tbl) = "|l|l|l|"
fileName = paste0("group", g, ".tex")
print(tbl, file = fileName, include.rownames = FALSE, table.placement = "h")
}
library(help=Bolstad)
library(Bolstad)
install.packages("Bolstad")
library(Bolstad)
library(helpBolstad)
library(help=Bolstad)
library(s20x)
library(s20x)
library(s20x)
examples(summary2way)
example(summary2way)
data(arousal.df)
arousal.fit = lm(arousal ~ gender * picture, data = arousal.df)
summary2way(arousal.fit, page = "interaction")
arousal.aov = aov(arousal.fit)
str(arrousal.aov)
str(arousal.aov)
attr(arousal.aov$terms, "order")
attr(fit$terms, "term.labels")
attr(arousal.aov$terms, "term.labels")
attr(arousal.fit$terms, "term.labels")
library(s20x)
summary2way(arousal.fit, page = "interaction")
summary2way(arousal.fit, page = "nointeraction")
library(s20x)
?summary2way
summary2way()
summary2way
data("iris")
iris
X = iris[,-5]
SVD
svd
X = as.matrix(iris[,-5])
Z = scale(X, center = TRUE, scale = TRUE)
Z
ZtZ = t(Z)%*%Z
ZtZ
svd(ZtZ)
pc = prcomp(Z)
pc
s = svd(ZtZ)
s
sqrt(z$d)
sqrt(s$d)
pc
?prcomp
pc = prcomp(Z, center = FALSE)
pc
str(pc)
pc$sdve
plot(pc$sdev,s$d)
pc = prcomp(X)
pc
svd(t(X)%*%X)
svd(t(X)%*%X)$d
dim(iris.df)
dim(iris)
svd(t(X)%*%X)$d/150
sqrt(svd(t(X)%*%X)$d/149)
svd(t(X)%*%X)$d
pc$sdev
pc = prcomp(Z, center = FALSE)
pc
?prcomp
eigen(ZtZ)
eigen(ZtZ)$values
sqrt(eigen(ZtZ)$values)
pc$sdev
pc = prcomp(X, center = FALSE)
pc
pc = prcomp(X, .scale = TRUE)
pc = prcomp(X, scale = TRUE)
pc
pc
ZtZ
s = svd(ZtZ)
s
s = svd(solve(ZtZ)
)
s
s = svd(ZtZ)
s
svd(Z)
pc
knitr::opts_chunk$set(echo = TRUE)
data(iris)
X = as.matrix(iris[,-5])
Z = scale(X, center = TRUE, scale = TRUE)
ZtZ = t(Z) %*% Z
s = svd(ZtZ)
s$d
pc = prcomp(Z)
pc$sdev
data(iris)
X = as.matrix(iris[,-5])
Z = scale(X, center = TRUE, scale = TRUE)
ZtZ = t(Z) %*% Z
s = svd(ZtZ)
s$d
pc$sdev/s$d
princomp(X, cor = T)
s$d/sqrt(nrow(Z))
sqrt(s$d)/sqrt(nrow(Z))
sqrt(s$d / nrow(Z))
pc
pc$rotation
svd$Z
svdZ = s
svdZ$u %*% Z
Z %*% svdZ$u
scores = Z %*% svdZ$u
biplot(scores[,1:@])
biplot(scores[,1:2])
plot(scores[,1:2])
biplot(pc)
range(pc$1)
range(pc[,1])
range(scores[,1])
range(scores[,2])
knitr::opts_chunk$set(echo = TRUE)
data(iris)
X = matrix(iris[,-5])
X
X,5
names(iris)
X = as.matrix(iris[,-5])
Z = scale(X, center = TRUE, scale = TRUE)
ZtZ = t(Z) %*% Z
svdZ = svd(ZtZ)
ex1 = list(sdev = sqrt(svdZ$d / nrow(Z)), rotation = sdvZ$u)
pc = prcomp(Z)
pc1
ex1 = list(sdev = sqrt(svdZ$d / nrow(Z)), rotation = svdZ$u)
pc = prcomp(Z)
pc1
pc = prcomp(Z)
pc
ex1
pc = prcomp(Z)
str(pc)
pc$rotation
ex1$rotation
pc
pc$sdev
pc$rotation
ex1$rotation
class(ex1) = 'prcomp'
rownames(ex1$rotation) = paste0("PC", 1:4)
ex1$rotation
rownames(ex1$rotation) = colnames(iris)[-5]
colnames(ex1$rotation) = paste0("PC", 1:4)
rownames(ex1$rotation) = colnames(iris)[-5]
ex1$rotation
?prcomp
pc$center
apply(Z,2,sd)
pc$scale
ex1$center = FALSE
ex1$scale = FALSE
biplot(ex1)
prcomp.default
stat:::prcomp.default
stats:::prcomp.default
svdZu
svdZ$v
svdZ$u
ex1$x = Z %*% ex1$rotation
biplot(ex1)
par(mfrow=c(1,2))
biplot(pc)
biplot(ex1)
str(pc)
pc = prcomp(Z, center = FALSE, scale. = FALSE)
str(pc)
biplot(pc)
par(mfrow=c(1,2))
biplot(pc)
biplot(ex1)
par(mfrow=c(1,2))
biplot(pc)
biplot(ex1)
biplot.prcomp
graphics:::biplot.prcomp
methods(biplot)
?biplot.prcomp
stats:::biplot.prcomp()
stats:::biplot.prcomp
p.df = read.csv("https://www.stat.auckland.ac.nz/~curran/P.csv")
sapply(p.df[ ,sapply(p.df, is.numeric)], mean)
p.df
names(p.df)
p.df = read.csv("https://www.stat.auckland.ac.nz/~curran/P.csv", head = FALSE)
sapply(p.df[ ,sapply(p.df, is.numeric)], mean)
start = grep("vWA", Lines)
Lines[start]
Lines = readLines("https://www.stat.auckland.ac.nz/~curran/freqs.csv")
head(Lines)
str(Lines)
start = grep("vWA", Lines)
Lines[start]
vWALines = Lines[start:end]
end = start + 8
vWALines = Lines[start:end]
end = start + 9
vWALines = Lines[start:end]
infoLine = vWALines[1]
alleleLines = vWALines[-1]
numAlleles = as.numeric(unlist(strsplit(infoLine, ","))[1])
end = start + 9
vWALines = Lines[start:end]
infoLine = vWALines[1]
alleleLines = vWALines[-1]
numAlleles = as.numeric(unlist(strsplit(infoLine, ","))[1])
infoLine = vWALines[1]
alleleLines = vWALines[-1]
numAlleles = as.numeric(unlist(strsplit(infoLine, ","))[1])
infoLine = vWALines[1]
alleleLines = vWALines[-1]
numAlleles = as.numeric(unlist(strsplit(infoLine, ","))[1])
infoLine
infoLine = vWALines[1]
alleleLines = vWALines[-1]
numAlleles = as.numeric(unlist(strsplit(infoLine, ","))[2])
barplot(vwa.df[,-1])
vwa.df = data.frame(allele = rep(0, numAlleles), A = rep(0, numAlleles), C = rep(0, numAlleles), H = rep(0, numAlleles))
for(i in 1:9){
vwa.df[i,] = as.numeric(unlist(strsplit(alleleLines[i], ",")))
}
vwa.df
barplot(vwa.df[,-1])
barplot(t(as.matrix(vwa.df[,-1])), beside = T)
?barpolot
?barplot
barplot(t(as.matrix(vwa.df[,-1])), beside = T, names.arg = vwa.df$allele)
barplot(t(as.matrix(vwa.df[,-1])), beside = T, names.arg = vwa.df$allele)
box()
barplot(t(as.matrix(vwa.df[,-1])), beside = T, names.arg = vwa.df$allele, col = c("blue", "green", "white"))
legend("topleft", col = c("blue", "green", "white"), legend = c("African American", "Caucasian", "Hispanic"), bty = "n")
barplot(t(as.matrix(vwa.df[,-1])), beside = T, names.arg = vwa.df$allele, col = c("blue", "green", "white"))
legend("topleft", lty = 1, col = c("blue", "green", "white"), legend = c("African American", "Caucasian", "Hispanic"), bty = "n")
?legend
fit
data(teach.df)
library(s20x)
data(teach.df)
fit1 = lm(lang~IQ*as.factor(method), data = teach.df)
fit2 = lm(lang~IQ+as.factor(method), data = teach.df)
anova(fit1,fit2)
pnorm(-4)
pnorm(-3.5)
pnorm(-3.8)
pnorm(-3.5)
library(s20x)
install.packages("tibble")
?match.arg
?plot
plot.default
?qqnorm
library(s20x)
example("normcheck")
library(s20x)
example("normcheck")
c("", "") == ""
?qqnorm
qqnorm(rnorm(100), axes = F)
qqnorm(rnorm(100), axes = F, xlab = "", ylab = "")
qqnorm(rnorm(100), axes = F)
library(s20x)
example("normcheck")
debug(normcheck.defaukt)
debug(normcheck.default)
debug(s20xnormcheck.default)
debug(s20x:::normcheck.default)
example("normcheck")
xlab[2]
xlab
library(s20x)
library(s20x)
library(s20x)
example("normcheck")
library(s20x)
example("normcheck")
library(s20x)
example("normcheck")
library(s20x)
example("normcheck")
library(s20x)
library(s20x)
example("normcheck")
library(s20x)
?strwidth
par("fin")
strwidth("James", units = "fin")
strwidth("James", units = "fig")
strwidth("James is really unhelpful", units = "fig")
strwidth("James is really unhelpful blah blah", units = "fig")
1.2
1/1.2
?title
library(s20x)
example("normcheck")
library(s20x)
example("normcheck")
library(s20x)
example("normcheck")
library(s20x)
example("normcheck")
library(s20x)
example("normcheck")
data(peru.df)
fit = lm(BP~weight,data = peru.df)
normcheck(fit)
normcheck(fit, xlab = c(NA,NA))
normcheck(fit, xlab = c(NULL, NULL))
?par
library(s20x)
normcheck(fit, xlab = c(NULL, NULL))
normcheck(fit)
library(s20x)
normcheck(fit)
library(s20x)
normcheck(fit)
normcheck(fit)
library(s20x)
normcheck(fit)
par("mai")
library(s20x)
par("mai")
normcheck(fit)
library(s20x)
library(s20x)
normcheck(fit)
